// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid()) @db.Uuid
  email      String   @unique
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  fullName   String?  @map("full_name")
  customerId String?  @unique @map("customer_id")
  priceId    String?  @map("price_id")
  status     String   @default("inactive")

  // Relations
  payments Payment[]

  @@map("users")
}

model Quiz {
  id        String   @id @default(cuid())
  title     String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions Question[]

  @@map("quizzes")
}

model Question {
  id       String @id @default(cuid())
  question String
  answer   String
  quizId   String

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Payment {
  id              String   @id @default(uuid()) @db.Uuid
  amount          Int
  status          String
  stripePaymentId String   @unique @map("stripe_payment_id")
  priceId         String   @map("price_id")
  userEmail       String   @map("user_email")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userEmail], references: [email])

  @@map("payments")
}
